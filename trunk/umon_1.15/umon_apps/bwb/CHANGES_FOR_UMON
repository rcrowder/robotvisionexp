This file documents notes and changes that I made to BWB210 (from SourceForge)
so that it would be able to run as a standalone application on top of a 
MicroMonitor based target.  Only the source files in the SourceForge
distribution are used, the makefile and linker map file is target specific;
hence, they are not in this directory.

These changes are made based on the use of GNU/Cygwin build environment
that I got from MicroCross; hence, this application depends on the newlib
hooks to be included in the build.

In general:
 -	All filenames converted to lowercase. 
 -	All files run through DOS2UNIX.
 -	All MicroMonitor-specific changes below are wrapped with a
	test for the presence (or lack of) of the _UMON_ declaration.

All scripts under the BWBTEST directory have been run and appear to work.

Important note regarding memory leaks:
I've noticed that BWB is VERY sloppy with releasing allocated memory.
For cases where BWB is used to simply invoke a single BASIC program, 
the newlib_hooks code will manage those leaks at exit time; however,
if used in an interactive mode, each time "RUN" is invoked, more memory
is left hanging.  This definitely needs to be cleaned up.


###########################################################################
#
bwb_dio.c:
 -	The function bwb_close() checks the return value of fclose().  
	It appears that the fclose() function in the library that I am
	using is always returning NULL.  To get around this I modified
	the code so that the return from fclose() is ignored.  The #define
	TEST_FCLOSE_RETURN can be set to use the original code if necessary.
 -	The functions bwb_mkdir(), bwb_rmdir() and bwb_chdir() are removed
	as a result of the presence of the _UMON_ definition.

diffs:
	622,629d621
	< /* ELS note:
	<  * It appears that flcose doesn't return zero even when the 
	<  * underlying _close_r() call does return zero.  I'm guessing this
	<  * is a bug in the GNU library, so this code is changed to not
	<  * test the return from fclose() unless TEST_FCLOSE_RETURN is
	<  * set...
	<  */
	< #if TEST_FCLOSE_RETURN
	639,641d630
	< #else
	<       fclose( dev_table[ req_devnumber ].cfp );
	< #endif
	673d661
	< #ifndef _UMON_
	899,900d886
	< #endif
	< #endif	/* _UMON_ */
	913d898
	< #if UNIX_CMDS
	1821a1807
	> 

###########################################################################
#
bwb_tbl.c:
 -	The bwb_cmdtable[] array is modified so that UNIX_CMDS will not
	include th MKDIR, RMDIR & CHDIR commands if _UMON_ is defined.

diffs:
	41c41
	< struct bwb_command bwb_cmdtable[] =
	---
	> struct bwb_command bwb_cmdtable[ COMMANDS ] =
	51d50
	< #ifndef _UMON_
	55d53
	< #endif
	60d57
	< 
	337a335
	> 

###########################################################################
#
bwbasic.c:
 -	The variable errfdevice is initialized data in the original code.
	It is initialized to stderr; however, stderr is not a constant so
	this causes an error.  I changed errfdevice to a variable and 
	initialize it in code space to eliminate this problem.  This is not
	a MicroMonitor change, it's needed for the compilation to succeed.

diffs:
	49,51d48
	< #ifdef _UMON_
	< FILE *errfdevice;              /* output device for error messages */
	< #else
	53d49
	< #endif
	135,137d130
	< #ifdef _UMON_
	< 	errfdevice = stderr;
	< #endif

###########################################################################
#
bwx_tty.c:
 -	Added #include <math.h>, plus I changed main to return an integer
	to silence a warning generated by the compiler.  Neither of these
	changes are MicroMonitor-specific.

diffs:
	32d31
	< #include <math.h>
	62c61
	< int
	---
	> void
	88d86
	<    return(0);

###########################################################################
#
bwbasic.h:
 -	Set TRUE to 1 instead of -1.
 -	Set HAVE_SIGNAL to FALSE.
 -	Set HAVE_LONGJMP to FALSE.
 -	Set PROG_ERRORS to TRUE for analyzing the port.  To save some
	memory space, this can be set back to false.
 -	The declaration of bwb_cmdtable[] doesn't specify the number
	of items (COMMANDS) within the declaration.
 -	Removed the mkdir, chdir, rmdir function declarations.

diffs:

	28,30d27
	< #ifdef _UMON_
	< #define TRUE    1
	< #else
	32d28
	< #endif
	94,97d89
	< #ifdef _UMON_
	< #undef HAVE_SIGNAL
	< #define HAVE_SIGNAL FALSE
	< #endif
	104,107d95
	< #ifdef _UMON_
	< #undef HAVE_LONGJUMP
	< #define HAVE_LONGJUMP FALSE
	< #endif
	209,211d196
	< #ifdef _UMON_
	< #define PROG_ERRORS     TRUE  		/* identify serious programming errors */
	< #else
	213d197
	< #endif
	771,773d754
	< #ifdef _UMON_
	< extern struct bwb_command bwb_cmdtable[ ];
	< #else
	775d755
	< #endif
	1030d1009
	< #ifndef _UMON_
	1038d1016
	< #endif

###########################################################################
#
bwx_tty.h:
 -	The UNIX_CMDS macro is TRUE for MicroMonitor builds.

diffs:
	39,41d38
	< #ifdef _UMON_
	< #define UNIX_CMDS       TRUE
	< #else
	43d39
	< #endif
	46a43


###########################################################################
#
BUG FIXES:
Note that the above diffs do not account for these fixes.

1: The function var_islocal() (in bwb_var.c) is called at startup to scan
   through a local variable list.  An index (exsc) into a table (excs)
   of local contexts is initially set to -1; so this function must
   check for a value of -1 prior to using it as an index into the table.
   To find this fix, search for ELSFIX in bwb_var.c.
