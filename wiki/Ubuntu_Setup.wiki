#summary Setting up a Virtual Cogs development environment in a fresh install of Ubuntu.

= Introduction =

Previously I had setup a Virtual Cogs development environment that matched the environment that the Virtual Cogs Wiki outlines. It is based around Windows OS with cygwin providing the Linux distro to allow target cross-compiling.

With an interest in gaining Linux development experience I have now moved across to using Ubuntu Linux distro (via the Wubi installer).

The following outlines the procedures I have taken to setup Ubuntu for Virtual Cogs development and cross-compiling.

== Ubuntu Installation ==

My development laptop (IBM Thinkpad T42) has it's single hard drive partitioned into two drives of equal size. My exisiting Windows based development environment spanned across both drives, with the majority of the environment residing on the second hard drive.

Disk space was created (~18GB) on the second hard drive to allow for a Wubi install of Ubuntu. Annoyingly the disk partitions are not NTFS, so the FAT maximum file limit limits the maximum size of disk image files that Wubi creates. Telling Wubi to use 15GB for installation, for example, still only allows the virtual disk files to be a maximum of 4GB. Hopefully that will be enough space, particularly in the 'home.disk' to contain all the development libraries, toolchains, etc. But then there is access via root folders to the Windows drives and folders.

== Ubuntu Setup ==

Packages
  * build-essential
  * autoconf
  * automake
  * texinfo
  * libtool
  * libusb-dev
  * SVN(Subversion) & CVS
  * RPM & alien

{{{
cd ~
mkdir dev
cd dev
mkdir libs
mkdir drivers
sudo apt-get install build-essential autoconf automake texinfo libtool libusb-dev subversion cvs rpm alien
}}}

== GNU ARM Toolchain ==

Sourcery G++ Lite 2008q1-126 for ARM GNU/Linux (http://www.codesourcery.com/gnu_toolchains/arm)

{{{
cd ~/Desktop
chmod 755 arm-2008q1-126-arm-none-linux-gnueabi.bin
./arm-2008q1-126-arm-none-linux-gnueabi.bin
cd ~/CodeSourcery/Sourcery_G++_Lite/bin
export PATH=${PWD}:${PATH}
}}}

== Libraries ==

  * CP210x USB to UART Bridge VCP Drivers (http://www.silabs.com/tgwWebApp/public/web_content/products/Microcontrollers/USB/en/mcu_vcp.htm)

{{{
cd ~/dev/drivers
gzip -cd cp210x-3.0.0.tar.gz | tar xvf -
cd cp210x-3.0.0
./makerpm
cd /var/tmp/silabs/rpmbuild/RPMS/i386
sudo alien -iv cp210x-3.0.0-001.i386.rpm
(plug USB cable into VCMX212 *THEN* into PC)
dmesg | grep USB (to check to see if the install has worked)
sudo apt-get install minicom
sudo minicom -s
minicom
}}}

  * FTDI FT2232 (http://www.intra2net.com/de/produkte/opensource/ftdi/)

{{{
cd ~/dev/libs
gzip -cd libftdi-0.13.tar.gz | tar xvf -
cd libftdi-0.13
./configure
make
sudo make install
}}}

  * Tslib (See section below 'Touch Screen Driver')

== OpenOCD ==

http://openfacts.berlios.de/index-en.phtml?title=Open_On-Chip_Debugger
http://buffalo.nas-central.org/index.php/JTAG_&_OpenOCD_for_LS-Pro
http://forum.sparkfun.com/viewtopic.php?p=47245&highlight=#47245

  * TODO: Does the USB codes match the existing OpenOCD VC config file?
          Yes, but ft2232_device_desc needed to change to "Olimex OpenOCD JTAG TINY"
  * TODO: GDB Server??
          Comes with Codesourcery??

{{{
cd ~/dev/drivers
svn co svn://svn.berlios.de/openocd/trunk openocd
cd openocd
./bootstrap
./configure --enable-ft2232_libftdi
make
sudo make install
Add "none /proc/bus/usb usbfs auto,users,devmode=0666 0 0" to /etc/fstab
cd ~/dev
openocd -f vcmx212.cfg &
}}}
Use lsusb to check that the dongle is connected, eg. for my Olimex ARM-USB-OCD there is the line "Bus 002 Device 003: ID 15ba:0004" (For others it could be "15ba:0003")..
{{{
cat /sys/bus/usb/devices/2-2/idProduct should equal "0004"
cat /sys/bus/usb/devices/2-2/idVendor should equal "15ba"
cat /sys/bus/usb/devices/2-2/manufacturer should equal "Olimex"
cat /sys/bus/usb/devices/2-2/product should equal "Olimex OpenOCD JTAG TINY"
}}}

== Eclipse ==

Qt integration (http://trolltech.com/developer/downloads/qt/eclipse-integration-download)

  * TODO: OpenOCD/GDB integration

  # Follow the instructions for installing Eclipse and JRE from https://help.ubuntu.com/community/EclipseIDE
  # Continue with Virtual Cogs Wiki installation steps from http://wiki.virtualcogs.com/index.php?title=Eclipse_IDE_setup_with_Virtual_Cogs