#summary Setting up a Virtual Cogs development environment in a fresh install of Ubuntu.

= Introduction =

Previously I had setup a Virtual Cogs development environment that matched the environment that the Virtual Cogs Wiki outlines. It is based around Windows OS with cygwin providing the Linux distro to allow target cross-compiling.

With an interest in gaining Linux development experience I have now moved across to using Ubuntu Linux distro (via the Wubi installer).

The following outlines the procedures I have taken to setup Ubuntu for Virtual Cogs development and cross-compiling.

== Ubuntu Installation ==

My development laptop (IBM Thinkpad T42) has it's single hard drive partitioned into two drives of equal size. My exisiting Windows based development environment spanned across both drives, with the majority of the environment residing on the second hard drive.

Disk space was created (~18GB) on the second hard drive to allow for a Wubi install of Ubuntu. Annoyingly the disk partitions are not NTFS, so the FAT maximum file limit limits the maximum size of disk image files that Wubi creates. Telling Wubi to use 15GB for installation, for example, still only allows the virtual disk files to be a maximum of 4GB. Hopefully that will be enough space, particularly in the 'home.disk' to contain all the development libraries, toolchains, etc. But then there is access via root folders to the Windows drives and folders.

== Ubuntu Setup ==

An initial install of Ubuntu is quite bare for development purposes. So the first thing required is to grab various packages required to configure and build various libraries and drivers.

When the initial required packages are installed, the additional Virtual Cogs specific packages and libraries will be collected and built into one location, namely ~/dev
{{{
cd ~
mkdir dev
cd dev
mkdir libs
mkdir drivers
}}}

=== Packages ===
  * build-essential
  * autoconf
  * automake
  * texinfo
  * libtool
  * libusb-dev
  * libncurses5-dev
  * SVN(Subversion) & CVS
  * RPM & alien

To grab and install the latest versions of these packages, the following can be performed;
{{{
cd ~
sudo apt-get install build-essential autoconf automake texinfo libtool libusb-dev libncurses5-dev subversion cvs rpm alien
}}}

== GNU ARM Toolchain ==

Now we need an ARM compiler for cross-compiling for the VCMX212 target. Virtual Cogs recommends and supplies (via a link on their main web support page) the GNUArm.org toolchain. That is quite a simply way of installing the ARM toolchain under Windows/Cygwin, but I've prefered to use the CodeSourcery based toolchain. The main reason is that the CodeSourcery toolchain is actively being developed in partnership with ARM, Ltd.

The version used for this installation is; Sourcery G++ Lite 2008q1-126 for ARM GNU/Linux (http://www.codesourcery.com/gnu_toolchains/arm)

Installation steps are simply;
{{{
cd ~/Desktop
chmod 755 arm-2008q1-126-arm-none-linux-gnueabi.bin
./arm-2008q1-126-arm-none-linux-gnueabi.bin
cd ~/CodeSourcery/Sourcery_G++_Lite/bin
export PATH=${PWD}:${PATH}
}}}

== Libraries & Drivers ==

=== Silabs USB Bridge - *WARNING !!!Driver is unstable/crashing!!!* ===
http://www.etheus.net/CP210x_Linux_Driver

To connect and talk to the VCMX212 via the USB-USB(UART) bridge, the Silabs driver needs to be built and installed.

The current version at time of writing is 3.0.0, from; CP210x USB to UART Bridge VCP Drivers (https://www.silabs.com/support/pages/support.aspx?ProductFamily=USB+MCUs)

The install creates a RPM, so we use the alien package to convert and install it;
{{{
cd ~/dev/drivers
gzip -cd cp210x-3.0.0.tar.gz | tar xvf -
cd cp210x-3.0.0
./makerpm
cd /var/tmp/silabs/rpmbuild/RPMS/i386
sudo alien --to-deb -scripts cp210x-3.0.0-001.i386.rpm
sudo dpkg -i ./cp210x_3.0.0-2_i386.deb
}}}
Now to test if it is working.. Firstly plug the mini-USB edge of the cable into the VCMX212, then plug the other end into the PC. We can then use dmesg to see if the Silabs driver gets loaded, and minicom as the UART terminal program to talk to the VCMX212.

The first time minicom is called, we need to use the -s option to enter the setup menus. So that we can change the port and baud rate. Typically the Silabs driver hangs off of /dev/ttyUSB0, although this can vary. Plus the required baud rate is different from the rate described in the VCMX212 Manual PDF, and needs to be set to 230400 (8N1).
{{{
dmesg | grep USB
ldmod | grep cp21
sudo apt-get install minicom
sudo minicom -s
minicom
}}}

==== Issues ====

minicom has started hanging in a terminal window :( Looks like the driver is going wrong..
{{{
Jul 19 14:21:29 rcrowder-laptop kernel: [  655.189789] 
Jul 19 14:21:29 rcrowder-laptop kernel: [  655.189796] Pid: 6004, comm: minicom Tainted: P        (2.6.24-19-generic #1)
Jul 19 14:21:29 rcrowder-laptop kernel: [  655.189805] EIP: 0060:[<f8c07673>] EFLAGS: 00010246 CPU: 0
Jul 19 14:21:29 rcrowder-laptop kernel: [  655.189825] EIP is at silabs_cp210x_set_termios+0xaa3/0xab0 [cp210x]
Jul 19 14:21:29 rcrowder-laptop kernel: [  655.189832] EAX: 00384000 EBX: 00012000 ECX: 00000000 EDX: 00000000
Jul 19 14:21:29 rcrowder-laptop kernel: [  655.189840] ESI: e27b3800 EDI: 00000cb0 EBP: e3b5bc00 ESP: c4fa9d90
Jul 19 14:21:29 rcrowder-laptop kernel: [  655.189847]  DS: 007b ES: 007b FS: 00d8 GS: 0033 SS: 0068
Jul 19 14:21:29 rcrowder-laptop kernel: [  655.190553] ---[ end trace a90ad88ceb5f63b7 ]---
}}}
_Ongoing_ steps to resolve this issue..
{{{
cd /usr/src
sudo apt-get build-dep linux-image-$(uname -r)
apt-get source linux-image-$(uname -r)
sudo tar xjvf linux-source-2.6.24.tar.bz2
cd linux-source-2.6.24
sudo cp -vi /boot/config-`uname -r` .config
sudo make oldconfig
sudo make prepare
sudo make
sudo touch include/linux/config.h
...
cd ~/dev/drivers/cp2103-0.11.0
./configure -kver $(uname -r) -kinc /usr/src/linux-2.6.24/include -kpath /usr/src/linux-2.6.24
make -f Makefile.go modules
sudo make -f Makefile.go install
}}}

=== Olimex ARM-OCD-Tiny JTAG dongle ===
I'm using this version of the Olimex JTAG dongle to connect to the VCMX212 and VC21RB1 JTAG ports. Thankfully the dongle uses a FTDI FT2232 based chip, so we can build the opensource libftdi library. This library will then be used with OpenOCD to allow the GDB debugger to talk via JTAG with the ARM processors.

==== libftdi ====
The current version of libftdi is 0.13, taken from; http://www.intra2net.com/de/produkte/opensource/ftdi/

Steps required to build libftdi are;
{{{
cd ~/dev/libs
gzip -cd libftdi-0.13.tar.gz | tar xvf -
cd libftdi-0.13
./configure
make
sudo make install
}}}

==== OpenOCD ====
http://openfacts.berlios.de/index-en.phtml?title=Open_On-Chip_Debugger

http://buffalo.nas-central.org/index.php/JTAG_&_OpenOCD_for_LS-Pro

http://forum.sparkfun.com/viewtopic.php?p=47245&highlight=#47245

  * TODO: Does the USB codes match the existing OpenOCD VC config file?
          Yes, but ft2232_device_desc needed to change to "Olimex OpenOCD JTAG TINY"
  * TODO: GDB Server??
          Comes with Codesourcery??

{{{
cd ~/dev/drivers
svn co svn://svn.berlios.de/openocd/trunk openocd
cd openocd
./bootstrap
./configure --enable-ft2232_libftdi
make
sudo make install
Add "none /proc/bus/usb usbfs auto,users,devmode=0666 0 0" to /etc/fstab
cd ~/dev
openocd -f vcmx212.cfg &
}}}
Use lsusb to check that the dongle is connected, eg. for my Olimex ARM-USB-OCD there is the line "Bus 002 Device 003: ID 15ba:0004" (For others it could be "15ba:0003")..
{{{
cat /sys/bus/usb/devices/2-2/idProduct should equal "0004"
cat /sys/bus/usb/devices/2-2/idVendor should equal "15ba"
cat /sys/bus/usb/devices/2-2/manufacturer should equal "Olimex"
cat /sys/bus/usb/devices/2-2/product should equal "Olimex OpenOCD JTAG TINY"
}}}

== Eclipse ==

Qt integration (http://trolltech.com/developer/downloads/qt/eclipse-integration-download)

  * TODO: OpenOCD/GDB integration

  # Follow the instructions for installing Eclipse and JRE from https://help.ubuntu.com/community/EclipseIDE
  # Continue with Virtual Cogs Wiki installation steps from http://wiki.virtualcogs.com/index.php?title=Eclipse_IDE_setup_with_Virtual_Cogs

== COGLinux ==

  # Use the instructions from the Wiki (http://wiki.virtualcogs.com/index.php?title=Obtaining_Sources_via_Sourceforge_CVS)
  # And the SourceForge VC FAQ (http://sourceforge.net/cvs/?group_id=196361)
  # Rebuild kernel (http://wiki.virtualcogs.com/index.php?title=Building_Linux)
    * Don't for get to grab libncurses5-dev
    * And edit the Makefile (after 'make menuconfig' step) to change the CROSS_COMPILE define
  # Reflash kernel (http://wiki.virtualcogs.com/index.php?title=Reflashing_Linux_Kernel)